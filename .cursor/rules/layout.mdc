---
description: 
globs: 
alwaysApply: true
---
# Flex VSCode Extension - Project Layout

> **Last Updated**: December 2024 (Enhanced Diagnostic & Syntax Support)  
> **Purpose**: Complete project structure documentation with file descriptions  
> **Audience**: Developers, AI models, and contributors

## 📁 Project Root Structure

```
vscode_extension/
├── 📄 package.json                 # Extension manifest & dependencies (with dynamic AI models)
├── 📄 tsconfig.json               # TypeScript compiler configuration
├── 📄 webpack.config.js           # Webpack bundling configuration
├── 📄 .eslintrc.json             # ESLint code quality rules
├── 📄 .gitignore                 # Git ignore patterns
├── 📄 README.md                  # User documentation & usage guide
├── 📄 LICENSE                    # MIT license file
├── 📄 .cursor/rules/layout.mdc   # THIS FILE - Project structure documentation
├── 📄 REFACTORING_NOTES.md       # Detailed refactoring documentation
├── 📄 language-configuration.json # VSCode language configuration
├── 📄 bun.lock                   # Bun package manager lock file
├── 📄 flex-language-0.1.2.vsix   # Packaged extension file
├── 🔧 scripts/                   # Build and automation scripts
│   └── 📄 update-models.js        # OpenRouter model fetching script
├── 🎨 assets/                    # Static assets directory
├── 📝 snippets/                  # Code snippets directory
├── 🎨 syntaxes/                  # Syntax highlighting definitions
├── 🔧 src/                       # TypeScript source code
├── 🧪 tests/                     # Test files and utilities
├── 📊 data/                      # Dataset and language data
├── 📦 out/                       # Compiled TypeScript output
└── 📦 node_modules/              # npm dependencies (gitignored)
```

---

## 🔧 Source Code (`src/`)

The main TypeScript source code organized by feature and responsibility.

```
src/
├── 📄 extension.ts              # Main extension entry point & activation
├── 🎯 providers/                # VSCode language service providers
│   ├── 📄 hover-provider.ts     # Hover documentation provider
│   └── 📄 diagnostic-provider.ts # Advanced, accurate error detection & diagnostics
├── 🌐 language/                 # Flex language definitions
│   ├── 📄 builtins.ts          # Comprehensive built-in functions (50+ functions)
│   └── 📄 keywords.ts          # Complete language keywords & descriptions
├── ⚙️ compiler/                 # Flex compiler integration
│   ├── 📄 detection.ts         # Compiler detection & verification
│   └── 📄 execution.ts         # File execution & command handling
├── 🤖 services/                 # External service integrations
│   └── 📄 openrouter-service.ts # OpenRouter API integration & model management
└── 🔧 utils/                    # Utility functions
    └── 📄 shell-utils.ts        # Cross-platform shell operations
```

### 📄 File Descriptions

#### `src/extension.ts` (150+ lines) ⚡ **ENHANCED WITH OPENROUTER INTEGRATION**
**Main extension entry point with dynamic AI model management**
- Registers all VSCode providers (hover, diagnostics)
- Sets up command handlers (run file, configure compiler, AI model management)
- **New AI commands**: Refresh OpenRouter models, select AI model, open API settings
- **Background model preloading**: Automatically loads OpenRouter models on startup
- **Dynamic model selection**: Full model list with pricing and descriptions
- Manages extension lifecycle (activate/deactivate)
- Coordinates all other modules including OpenRouter service

#### `src/providers/hover-provider.ts` (50 lines)
**Hover documentation provider**
- Implements VSCode `HoverProvider` interface
- Shows documentation when hovering over Flex keywords/functions
- Handles Franco-Arabic special characters and numbers
- Provides rich markdown documentation with examples

#### `src/providers/diagnostic-provider.ts` (820+ lines) ⚡ **COMPLETELY REWRITTEN & PERFECTED**
**Advanced, context-aware error detection with zero false positives**
- **Intelligent user-defined function recognition**: Perfectly distinguishes between built-in and user-defined functions, completely eliminating false "misspelled function" errors
- **Comprehensive Flex keyword recognition**: Correctly identifies all Flex language keywords (`rakm`, `kasr`, `dorg`, `rg3`, `etb3`, etc.) and never flags them as undeclared variables
- **Advanced string handling**: Completely ignores content inside strings and string interpolation (`{variable}`) to prevent any false positives
- **Accurate variable tracking**: Properly extracts variable declarations from type declarations, assignments, loop variables, and function parameters across all scopes
- **Context-aware parsing**: Uses sophisticated parsing that deeply understands Flex syntax patterns and structure
- **Smart brace checking**: Only counts braces outside of strings, preventing any false brace mismatch errors
- **Function parameter recognition**: Correctly identifies function parameters as declared variables in their scope
- **Precise error targeting**: Only flags genuine issues like truly undeclared variables and actual misspelled built-in functions
- **Visual feedback system**: Provides clear visual underlines for errors (red), warnings (orange), and hints (blue)
- **Configurable strict mode**: Optional strict variable declaration checking that works accurately when enabled
- **Bilingual equality**: Treats both English (`true`/`false`) and Franco Arabic (`sa7`/`ghalt`) boolean values as equally valid with no suggestions or underlines
- **Zero false positives**: Extensively tested to ensure no valid Flex syntax is flagged as an error

#### `src/language/builtins.ts` (300+ lines) 🔥 **MASSIVELY EXPANDED**
**Comprehensive built-in function catalog**
- **50+ built-in functions** across 6 categories:
  - **I/O Functions**: `etb3`, `print`, `da5l`, `scan`, etc.
  - **String Functions**: `length`, `tool`, `split`, `trim`, `upper`, `lower`, `contains`
  - **Math Functions**: `sqrt`, `power`, `abs`, `round`, `floor`, `ceil`, `min`, `max`, `random`
  - **Type Checking**: `isNumber`, `isString`, `isList`, `isBool` + Franco variants
  - **System Functions**: `getCurrentTime`, `systemType`, `sleep`, `listFiles`
  - **File Functions**: Complete I/O with `readFile`, `writeFile`, `appendFile`, `deleteFile`
- **Full bilingual support**: Both English and Franco-Arabic function variants
- **Rich documentation**: Syntax examples and detailed descriptions
- **Organized by category**: Logical grouping for better maintainability

#### `src/language/keywords.ts` (239 lines)
**Complete language keyword definitions**
- Complete Flex keyword catalog with descriptions
- Conditional, loop, function, and type keywords
- Franco-Arabic and English variants
- Usage examples and syntax guidance

#### `src/compiler/detection.ts` (150+ lines) ⚡ **ENHANCED UNIX FLEX REJECTION**
**Flex compiler detection system with improved discrimination**
- **Enhanced Unix flex rejection**: Specifically rejects Unix flex lexical analyzer (flex 2.6.x, Apple(flex-xx))
- **Prioritized path detection**: Checks `/usr/local/bin/flex` before `/usr/bin/flex` on macOS
- **Strict verification**: Only accepts compilers that explicitly mention "Flex Language"
- OS-specific compiler path detection with proper ordering
- Compiler verification and validation with detailed logging
- Installation help and download prompts

#### `src/compiler/execution.ts` (150+ lines) ⚡ **INTEGRATED TERMINAL EXECUTION WITH WINDOWS SUPPORT**
**File execution and commands with terminal-based output**
- **Terminal execution**: Runs Flex files directly in VSCode's integrated terminal
- **Windows-specific execution**: Supports Windows `."{compiler}" {file}` syntax requirement
- **Windows AI execution**: Three separate commands (PowerShell env → clear → run) for better reliability
- **Cross-platform command formatting**: Automatic platform detection and command adaptation
- **Terminal reuse**: Creates and reuses a dedicated "Flex" terminal for consistency
- **Debug information**: Shows compiler path and file details before execution
- File validation and syntax checking
- Advanced compiler testing with execution capability testing
- Compiler path configuration commands

#### `src/services/openrouter-service.ts` (200+ lines) 🔥 **NEW - DYNAMIC MODEL INTEGRATION**
**OpenRouter API service with intelligent model management**
- **Dynamic model fetching**: Real-time model list from OpenRouter API instead of hardcoded enums
- **Smart caching**: 24-hour model cache with fallback to prevent API rate limits
- **Popular model prioritization**: Curated list of recommended models for better UX
- **Pricing information**: Display model costs per million tokens for informed selection
- **Fallback handling**: Graceful degradation when API is unavailable with backup model list
- **Model enum generation**: Creates VS Code setting enums dynamically from fetched models
- **Force refresh capability**: Manual model cache refresh for latest available models
- **Error resilience**: Comprehensive error handling with user-friendly messages

#### `src/utils/shell-utils.ts` (80 lines)
**Cross-platform shell utilities**
- Safe command execution with proper escaping
- Cross-platform path handling
- Timeout and error management
- Shell meta-character escaping

---

## 🔧 Scripts (`scripts/`)

Build automation and model management scripts.

```
scripts/
└── 📄 update-models.js          # OpenRouter model fetching and package.json update script
```

#### `scripts/update-models.js` (150+ lines) 🔥 **NEW - BUILD-TIME MODEL FETCHING**
**OpenRouter model fetching and package.json automation**
- **Real-time API fetching**: Gets latest models from OpenRouter during build process
- **Intelligent model organization**: Prioritizes popular models, then alphabetical sorting
- **Package.json integration**: Directly updates VS Code configuration enums
- **Rich model information**: Includes descriptions and pricing in enum descriptions
- **Build process integration**: Runs automatically during `npm run vscode:prepublish`
- **Error handling**: Graceful fallback and comprehensive error reporting
- **Selective inclusion**: 45+ models selected from 319+ available for optimal UX

---

## 🧪 Tests (`tests/`)

Testing infrastructure and test files.

```
tests/
├── 🔧 unit/                     # Unit tests directory
│   ├── 📄 test-utils.ts         # Testing utilities & mocks
│   └── 📄 hover-provider.test.ts # Hover provider unit tests
├── 🔗 integration/              # Integration tests (empty, ready for use)
└── 📁 fixtures/                 # Test data and sample files
    ├── 📄 test_flex.lx          # Sample Flex file for testing
    ├── 📄 test_error.lx         # Error test case file
    ├── 📄 fully_working_flex.lx # Complete working Flex example
    └── 📄 test_strict_variables.lx # Test file for strict variable declarations setting
```

#### `tests/unit/test-utils.ts` (120 lines)
**Testing utilities and mocks**
- VSCode API mocking utilities
- Mock document and context creation
- Diagnostic assertion helpers
- Test infrastructure for extension components

#### `tests/unit/hover-provider.test.ts` (80 lines)
**Hover provider unit tests**
- Tests hover functionality for built-in functions
- Tests keyword hover documentation
- Tests Franco-Arabic special function handling
- Validates hover behavior edge cases

---

## 📊 Data (`data/`)

Language data and datasets.

```
data/
└── 📄 flex_dataset.json         # Comprehensive Flex language dataset (122KB)
```

#### `data/flex_dataset.json` (3,058 lines) 📚 **INTEGRATED**
**Comprehensive Flex language specification**
- **Complete grammar definition**: All syntax patterns and rules
- **50+ built-in functions**: Full function catalog with examples
- **Bilingual examples**: Franco Arabic and English code samples
- **Best practices**: Safe coding patterns and performance optimization
- **Error handling**: Comprehensive error prevention strategies
- **Project templates**: Complete application examples (calculator, todo list)
- **Performance patterns**: Memory-efficient coding techniques

---

## 🎨 Assets & Configuration

VSCode extension configuration and assets.

```
assets/
└── 📄 data.png                 # Extension icon

snippets/
└── 📄 flex.json                # Enhanced code snippets

syntaxes/
└── 📄 flex.tmLanguage.json     # Advanced syntax highlighting
```

#### `assets/data.png`
**Extension icon** - Visual identifier for the Flex extension in VSCode marketplace

#### `snippets/flex.json` (1000+ lines) 🚀 **SIGNIFICANTLY ENHANCED**
**Comprehensive code snippet library**
- **50+ code snippets** covering all language features:
  - **Control structures**: Franco and English conditionals, loops
  - **Functions**: Typed parameters, error handling patterns
  - **File operations**: Read, write, append, delete with both syntax styles
  - **Franco list methods**: `.d7af()`, `.shyl()`, `.2leb()`, `.rtb()`
  - **String operations**: Full manipulation with bilingual support
  - **Math operations**: Complete mathematical function coverage
  - **Performance patterns**: Memory-efficient processing templates
  - **Project templates**: Calculator, todo list, menu systems
- **Safety patterns**: Franco loop bounds checking, error recovery
- **Bilingual support**: Both Franco Arabic and English variants
- **Production-ready**: Complete, runnable code examples

#### `syntaxes/flex.tmLanguage.json` (500+ lines) ⚡ **ENHANCED**
**Advanced TextMate syntax highlighting**
- **Comprehensive language coverage**: All keywords, operators, and functions
- **Mixed logical operators**: Support for both `&&`/`||` and `and`/`or` styles
- **Enhanced built-in function highlighting**: 50+ functions across all categories
- **Franco list methods**: Proper highlighting for `.d7af()`, `.shyl()`, etc.
- **File operation functions**: Complete I/O function recognition
- **Import statement support**: `geep`, `geeb`, `import` highlighting
- **String interpolation**: Robust `{variable}` pattern matching
- **Comment support**: Multiple comment styles with proper scoping

---

## 📦 Build Output (`out/`)

Compiled TypeScript output and webpack bundles.

```
out/
├── 📄 extension.js             # Webpack bundled extension (50.4KB, optimized)
├── 📄 extension.js.map         # Source map for debugging
├── 📁 compiler/                # Compiled compiler modules
├── 📁 language/                # Compiled language modules (expanded)
├── 📁 providers/               # Compiled provider modules (enhanced)
└── 📁 utils/                   # Compiled utility modules
```

---

## 🔧 Configuration Files

### `package.json` (190+ lines) ⚡ **ENHANCED WITH DYNAMIC AI CONFIGURATION**
**Extension manifest and dependencies**
- VSCode extension metadata and configuration
- **Six functional settings**: All compiler, AI, and diagnostic options
- **Clickable OpenRouter API key link**: Direct access to [OpenRouter settings](https://openrouter.ai/settings/keys)
- **New AI management commands**: Refresh models, select model, open API settings
- AI command with sparkle icon for enhanced visual distinction
- Command definitions and contribution points
- Language configuration and file associations
- Build scripts and development dependencies
- **Complete AI integration** with dynamic OpenRouter model discovery

### `tsconfig.json` (20 lines)
**TypeScript compiler configuration**
- Strict type checking enabled
- ES2020 target with CommonJS modules
- Source map generation for debugging
- Proper include/exclude patterns

### `webpack.config.js` (40 lines)
**Webpack bundling configuration**
- Node.js target for VSCode extensions
- TypeScript loader configuration
- External dependencies handling
- Source map generation

### `.eslintrc.json` (25 lines)
**ESLint code quality configuration**
- TypeScript parser and plugins
- Code quality rules and standards
- Ignore patterns for build output
- Consistent coding style enforcement

### `language-configuration.json` (101 lines)
**VSCode language configuration**
- Bracket matching and auto-closing
- Comment configuration (single/multi-line)
- Indentation rules for Flex constructs
- Word patterns and folding markers

---

## 📈 Project Metrics

| Metric | Value | Change |
|-----|----|-----|
| **Total TypeScript Files** | 9 | → |
| **Total Lines of Code** | ~1,850 | ↑ 650 lines |
| **Built-in Functions** | 50+ | ↑ 35+ functions |
| **Code Snippets** | 50+ | ↑ 25+ snippets |
| **Test Files** | 2 | → |
| **Configuration Files** | 6 | → |
| **Bundle Size** | 50.4 KB | ↑ 16.8 KB |
| **Module Count** | 8 focused modules | → |

---

## 🎯 Module Dependencies

```
extension.ts
├── providers/hover-provider.ts
├── providers/diagnostic-provider.ts (perfected)
├── services/openrouter-service.ts (new - dynamic AI models)
├── compiler/execution.ts
└── compiler/detection.ts
    ├── utils/shell-utils.ts
    └── language/builtins.ts (massively expanded)
        └── language/keywords.ts
```

---

## ⚡ Recent Enhancements (December 2024)

### 🔧 **Critical Diagnostic Provider Perfection**
- **Complete rewrite**: 820+ lines of robust, accurate diagnostic code
- **Zero false positives**: Extensively tested to ensure no valid Flex syntax is flagged
- **User-defined function recognition**: Perfectly identifies custom functions like `add`, `multiply`, etc.
- **Comprehensive keyword support**: All Flex keywords (`rakm`, `kasr`, `dorg`, `rg3`, etc.) correctly recognized
- **Advanced string parsing**: Complete isolation of string content and interpolation to prevent false flags
- **Function parameter tracking**: Parameters in function definitions properly recognized as declared variables
- **Bilingual boolean equality**: Both `true`/`false` and `sa7`/`ghalt` treated as equally valid with no suggestions
- **Smart context awareness**: Understanding of Flex syntax patterns prevents inappropriate error flagging

### 🔧 **AI-Powered Development Assistance & Build-Time Model Integration** 🔥 **ENHANCED**
- **Proper AI integration**: Correctly uses Flex compiler's `--ai` flag with proper syntax
- **Build-time model fetching**: Package.json is automatically updated with 45+ latest models during build
- **Real dropdown integration**: Full VS Code settings dropdown with 319 models available from OpenRouter
- **Intelligent model organization**: Popular models prioritized first, then alphabetical additional models
- **Rich model information**: Descriptions and pricing per million tokens visible in dropdown
- **User-friendly model selection**: Both settings dropdown and advanced quick-pick interface
- **Clickable API key setup**: Direct link to [OpenRouter API key settings](https://openrouter.ai/settings/keys)
- **Comprehensive model commands**: Refresh cache, select from full list, open API settings
- **Smart build system**: `npm run update-models` fetches latest models before packaging
- **Default model support**: Option to use Flex compiler's built-in default model
- **Dedicated AI terminal**: Separate "Flex AI" terminal for AI-enhanced execution
- **Cost transparency**: Display model pricing per million tokens for informed decisions
- **Background preloading**: Runtime cache for dynamic command interface

### 🔧 **Settings & Configuration Improvements**
- **Implemented strictVariableDeclarations**: Now properly warns about undeclared variable usage when enabled
- **Variable tracking system**: Advanced analysis to detect declared variables across document scopes
- **AI settings fully functional**: Complete AI integration with OpenRouter API support
- **Settings validation**: All settings are now properly implemented and functional
- **Clear setting descriptions**: Updated descriptions to accurately reflect actual functionality

### 🎯 **Current Functional Settings:**

| Setting | Type | Default | Description | Status |
|---|---|---|----|-----|
| `flex.compilerPath` | string | `""` | Path to the Flex compiler executable | ✅ Fully Working |
| `flex.strictVariableDeclarations` | boolean | `false` | Shows warnings for undeclared variables | ✅ Fully Working |
| `flex.enableAI` | boolean | `false` | Enable AI-powered debugging and assistance | ✅ Newly Added |
| `flex.aiModel` | enum | `"openai/gpt-4o-mini"` | AI model selection (openai/gpt-4o, anthropic/claude-3.5-sonnet, etc.) | ✅ Newly Added |
| `flex.customAIModel` | string | `""` | Custom AI model name for advanced users | ✅ Newly Added |
| `flex.openRouterApiKey` | string | `""` | OpenRouter API key for AI functionality | ✅ Newly Added |

### 🔧 **Terminal-Based Execution**
- **Integrated terminal output**: Flex files now run directly in VSCode's integrated terminal instead of output panel
- **Dedicated terminal**: Creates and reuses a "Flex" terminal for consistent execution environment
- **Real-time interaction**: Users can see live output and interact with programs that require input
- **Debug information**: Shows compiler and file details before execution in terminal
- **Proper working directory**: Sets terminal working directory to the file's location

### 🔧 **Execution & Debugging Improvements**
- **Enhanced debug output**: Detailed logging shows compiler path, file path, and arguments for troubleshooting
- **Improved error reporting**: Better error messages with exit codes and comprehensive stderr/stdout capture
- **Advanced compiler testing**: New test command validates both compiler detection and file execution capabilities
- **Cross-platform compatibility**: Improved command execution handling for different operating systems
- **Windows-specific execution format**: Added support for Windows `."{compiler}" {file}` syntax requirement
- **Windows AI execution workflow**: Three separate terminal commands (PowerShell env variable → clear → run) for better reliability
- **Platform-aware command formatting**: Automatic detection and adaptation of compiler commands per operating system

### 🔧 **Diagnostic Provider Achievements**
- **Eliminated all false positives**: No more incorrect warnings for valid Flex syntax
- **Perfect user-defined function support**: Functions like `add()`, `multiply()` correctly recognized
- **Complete keyword recognition**: All Flex type keywords, control flow, and built-ins properly identified
- **Advanced string content isolation**: Text inside strings and interpolation completely ignored
- **Smart variable tracking**: Declarations from all sources (types, assignments, loops, parameters) captured
- **Bilingual boolean support**: Equal treatment of English and Franco Arabic boolean values
- **Enhanced pattern recognition**: Sophisticated regex patterns for accurate Flex syntax detection
- **Visual error feedback**: Precise red/orange/blue underlines only for genuine issues
- **Bundle size optimization**: Reduced from 50.9 KB to 50.4 KB by removing unnecessary code

### 🎨 **Syntax Highlighting Enhancements**
- **Mixed logical operator support**: `&&`/`||` and `and`/`or` both highlighted
- **Expanded function coverage**: All 50+ built-in functions recognized
- **Franco list methods**: Proper highlighting for Arabic list operations
- **Import statement support**: Complete module import recognition
- **Function call highlighting**: All function calls (including user-defined) get proper coloring

### 📚 **Built-in Function Library Expansion**
- **6 function categories**: I/O, String, Math, Type, System, File operations
- **Bilingual documentation**: Both English and Franco Arabic variants
- **Rich examples**: Complete usage examples for all functions
- **Type safety**: Proper parameter and return type documentation

### 📝 **Code Snippet Library Growth**
- **50+ comprehensive snippets**: All language features covered
- **Performance patterns**: Memory-efficient coding templates
- **Safety patterns**: Franco loop bounds checking, error handling
- **Project templates**: Complete application examples

---

## 📋 Maintenance Notes

### When Adding Files:
1. **Update this layout.mdc file** ← ALWAYS REQUIRED
2. Add appropriate TypeScript exports
3. Update webpack entry points if needed
4. Add corresponding tests

### When Removing Files:
1. **Update this layout.mdc file** ← ALWAYS REQUIRED
2. Remove imports from dependent files
3. Update build configurations
4. Remove related tests

### File Naming Conventions:
- **TypeScript**: `kebab-case.ts`
- **Tests**: `kebab-case.test.ts`
- **Configuration**: `kebab-case.json`
- **Documentation**: `UPPER_CASE.md`

---
flex docs https://deepwiki.com/Hassan220022/Flex

*This layout documentation is automatically maintained and should be updated whenever the project structure changes.* 
