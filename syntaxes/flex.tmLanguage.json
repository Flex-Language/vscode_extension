{
  "name": "Flex",
  "scopeName": "source.flex",
  "fileTypes": ["lx", "fx", "flex"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#list_operations"
    },
    {
      "include": "#control_structures"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.flex",
          "match": "//.*$"
        },
        {
          "name": "comment.line.number-sign.flex",
          "match": "#.*$"
        },
        {
          "name": "comment.block.flex",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": { "name": "punctuation.definition.comment.flex" }
          }
        },
        {
          "name": "comment.block.documentation.flex",
          "begin": "'''",
          "end": "'''",
          "captures": {
            "0": { "name": "punctuation.definition.comment.flex" }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.flex",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.flex",
          "match": "\\\\."
        },
        {
          "name": "variable.other.interpolated.flex",
          "match": "\\{[^}]+\\}"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flex",
          "match": "\\b(lw|aw|gher|if|elif|else|otherwise|talama|talma|tlma|while|loop|karr|l7d|for|w2f|break|stop|rg3|return|cond)\\b"
        },
        {
          "name": "keyword.other.flex",
          "match": "\\b(geep|geeb|import)\\b"
        },
        {
          "name": "constant.language.boolean.flex",
          "match": "\\b(sa7|ghalt|true|false|True|False)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.flex",
          "match": "\\b(rakm|kasr|so2al|klma|dorg|int|float|bool|string|list)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.flex",
          "match": "\\b(sndo2|sando2|fn|fun|function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        },
        {
          "name": "entity.name.function.flex",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        },
        {
          "name": "support.function.flex",
          "match": "\\b(etb3|out|output|printf|print|cout|scan|read|input|da5l|da5al|d5l)\\b"
        },
        {
          "name": "support.function.list.flex",
          "match": "\\.(push|pop|remove|delete|length)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.flex",
          "match": "\\+\\+|--|\\+=|-=|\\*=|/=|[+\\-*/]"
        },
        {
          "name": "keyword.operator.comparison.flex",
          "match": "==|!=|>|<|>=|<="
        },
        {
          "name": "keyword.operator.assignment.flex",
          "match": "="
        },
        {
          "name": "keyword.operator.logical.flex",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.flex",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.float.flex",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.flex",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "keyword.control.import.flex",
          "match": "\\b(geep|geeb|import)\\s+\"[^\"]*\""
        }
      ]
    },
    "list_operations": {
      "patterns": [
        {
          "name": "variable.other.member.flex",
          "match": "\\[[^\\]]*\\]"
        },
        {
          "name": "support.function.builtin.flex",
          "match": "\\b(length)\\s*\\("
        },
        {
          "name": "constant.language.flex",
          "match": "\\[[^\\]]*\\]"
        }
      ]
    },
    "control_structures": {
      "patterns": [
        {
          "name": "keyword.control.conditional.flex",
          "match": "\\b(lw|if|cond)\\b"
        },
        {
          "name": "keyword.control.conditional.else.flex",
          "match": "\\b(aw|elif)\\b"
        },
        {
          "name": "keyword.control.conditional.else.flex",
          "match": "\\b(gher|else|otherwise)\\b"
        },
        {
          "name": "keyword.control.loop.flex",
          "match": "\\b(karr|for)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*[^\\s]+\\s+l7d\\s+[^\\s]+"
        },
        {
          "name": "keyword.control.loop.flex",
          "match": "\\b(talama|talma|tlma|while|loop)\\b"
        }
      ]
    }
  }
} 